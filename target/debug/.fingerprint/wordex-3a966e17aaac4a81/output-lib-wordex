{"message":"expected type, found keyword `pub`","code":null,"level":"error","spans":[{"file_name":"src/state.rs","byte_start":380,"byte_end":383,"line_start":15,"line_end":15,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    pub count: i32,","highlight_start":5,"highlight_end":8}],"label":"expected type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected type, found keyword `pub`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/state.rs:15:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub count: i32,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected type\u001b[0m\n\n"}
{"message":"expected one of: `for`, parentheses, `fn`, `unsafe`, `extern`, identifier, `::`, `<`, square brackets, `*`, `&`, `!`, `impl`, `_`, lifetime","code":null,"level":"error","spans":[{"file_name":"src/state.rs","byte_start":380,"byte_end":383,"line_start":15,"line_end":15,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    pub count: i32,","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected one of: `for`, parentheses, `fn`, `unsafe`, `extern`, identifier, `::`, `<`, square brackets, `*`, `&`, `!`, `impl`, `_`, lifetime\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/state.rs:15:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub count: i32,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\n"}
{"message":"unused import: `Pair`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/state.rs","byte_start":89,"byte_end":93,"line_start":4,"line_end":4,"column_start":26,"column_end":30,"is_primary":true,"text":[{"text":"use cosmwasm_std::{Addr, Pair};","highlight_start":26,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/state.rs","byte_start":87,"byte_end":93,"line_start":4,"line_end":4,"column_start":24,"column_end":30,"is_primary":true,"text":[{"text":"use cosmwasm_std::{Addr, Pair};","highlight_start":24,"highlight_end":30}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Pair`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/state.rs:4:26\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse cosmwasm_std::{Addr, Pair};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"the method `update` exists for struct `Item<'static, state::State>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":1462,"byte_end":1468,"line_start":48,"line_end":48,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"    STATE.update(deps.storage, |mut state| -> Result<_, ContractError> {","highlight_start":11,"highlight_end":17}],"label":"method cannot be called on `Item<'static, state::State>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/state.rs","byte_start":195,"byte_end":211,"line_start":8,"line_end":8,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct State {","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `state::State: DeserializeOwned`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/state.rs","byte_start":195,"byte_end":211,"line_start":8,"line_end":8,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct State {","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `state::State: Serialize`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`state::State: Serialize`\n`state::State: DeserializeOwned`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following traits must be implemented","code":null,"level":"note","spans":[{"file_name":"/home/abhilash/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.127/src/de/mod.rs","byte_start":22260,"byte_end":22316,"line_start":602,"line_end":602,"column_start":1,"column_end":57,"is_primary":true,"text":[{"text":"pub trait DeserializeOwned: for<'de> Deserialize<'de> {}","highlight_start":1,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/abhilash/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.127/src/ser/mod.rs","byte_start":7921,"byte_end":9092,"line_start":216,"line_end":250,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub trait Serialize {","highlight_start":1,"highlight_end":22},{"text":"    /// Serialize this value into the given Serde serializer.","highlight_start":1,"highlight_end":62},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// See the [Implementing `Serialize`] section of the manual for more","highlight_start":1,"highlight_end":74},{"text":"    /// information about how to implement this method.","highlight_start":1,"highlight_end":56},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// ```edition2018","highlight_start":1,"highlight_end":23},{"text":"    /// use serde::ser::{Serialize, SerializeStruct, Serializer};","highlight_start":1,"highlight_end":66},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// struct Person {","highlight_start":1,"highlight_end":24},{"text":"    ///     name: String,","highlight_start":1,"highlight_end":26},{"text":"    ///     age: u8,","highlight_start":1,"highlight_end":21},{"text":"    ///     phones: Vec<String>,","highlight_start":1,"highlight_end":33},{"text":"    /// }","highlight_start":1,"highlight_end":10},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // This is what #[derive(Serialize)] would generate.","highlight_start":1,"highlight_end":61},{"text":"    /// impl Serialize for Person {","highlight_start":1,"highlight_end":36},{"text":"    ///     fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>","highlight_start":1,"highlight_end":77},{"text":"    ///     where","highlight_start":1,"highlight_end":18},{"text":"    ///         S: Serializer,","highlight_start":1,"highlight_end":31},{"text":"    ///     {","highlight_start":1,"highlight_end":14},{"text":"    ///         let mut s = serializer.serialize_struct(\"Person\", 3)?;","highlight_start":1,"highlight_end":71},{"text":"    ///         s.serialize_field(\"name\", &self.name)?;","highlight_start":1,"highlight_end":56},{"text":"    ///         s.serialize_field(\"age\", &self.age)?;","highlight_start":1,"highlight_end":54},{"text":"    ///         s.serialize_field(\"phones\", &self.phones)?;","highlight_start":1,"highlight_end":60},{"text":"    ///         s.end()","highlight_start":1,"highlight_end":24},{"text":"    ///     }","highlight_start":1,"highlight_end":14},{"text":"    /// }","highlight_start":1,"highlight_end":10},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [Implementing `Serialize`]: https://serde.rs/impl-serialize.html","highlight_start":1,"highlight_end":73},{"text":"    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>","highlight_start":1,"highlight_end":69},{"text":"    where","highlight_start":1,"highlight_end":10},{"text":"        S: Serializer;","highlight_start":1,"highlight_end":23},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `update` exists for struct `Item<'static, state::State>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:48:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    STATE.update(deps.storage, |mut state| -> Result<_, ContractError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `Item<'static, state::State>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/state.rs:8:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct State {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `state::State: DeserializeOwned`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `state::State: Serialize`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `state::State: Serialize`\u001b[0m\n\u001b[0m            `state::State: DeserializeOwned`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following traits must be implemented\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/abhilash/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.127/src/de/mod.rs:602:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m602\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub trait DeserializeOwned: for<'de> Deserialize<'de> {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/abhilash/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.127/src/ser/mod.rs:216:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Serialize {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Serialize this value into the given Serde serializer.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// See the [Implementing `Serialize`] section of the manual for more\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        S: Serializer;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\n\n"}
{"message":"the method `update` exists for struct `Item<'static, state::State>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":1756,"byte_end":1762,"line_start":56,"line_end":56,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"    STATE.update(deps.storage, |mut state| -> Result<_, ContractError> {","highlight_start":11,"highlight_end":17}],"label":"method cannot be called on `Item<'static, state::State>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/state.rs","byte_start":195,"byte_end":211,"line_start":8,"line_end":8,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct State {","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `state::State: DeserializeOwned`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/state.rs","byte_start":195,"byte_end":211,"line_start":8,"line_end":8,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct State {","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `state::State: Serialize`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`state::State: Serialize`\n`state::State: DeserializeOwned`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following traits must be implemented","code":null,"level":"note","spans":[{"file_name":"/home/abhilash/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.127/src/de/mod.rs","byte_start":22260,"byte_end":22316,"line_start":602,"line_end":602,"column_start":1,"column_end":57,"is_primary":true,"text":[{"text":"pub trait DeserializeOwned: for<'de> Deserialize<'de> {}","highlight_start":1,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/abhilash/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.127/src/ser/mod.rs","byte_start":7921,"byte_end":9092,"line_start":216,"line_end":250,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub trait Serialize {","highlight_start":1,"highlight_end":22},{"text":"    /// Serialize this value into the given Serde serializer.","highlight_start":1,"highlight_end":62},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// See the [Implementing `Serialize`] section of the manual for more","highlight_start":1,"highlight_end":74},{"text":"    /// information about how to implement this method.","highlight_start":1,"highlight_end":56},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// ```edition2018","highlight_start":1,"highlight_end":23},{"text":"    /// use serde::ser::{Serialize, SerializeStruct, Serializer};","highlight_start":1,"highlight_end":66},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// struct Person {","highlight_start":1,"highlight_end":24},{"text":"    ///     name: String,","highlight_start":1,"highlight_end":26},{"text":"    ///     age: u8,","highlight_start":1,"highlight_end":21},{"text":"    ///     phones: Vec<String>,","highlight_start":1,"highlight_end":33},{"text":"    /// }","highlight_start":1,"highlight_end":10},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // This is what #[derive(Serialize)] would generate.","highlight_start":1,"highlight_end":61},{"text":"    /// impl Serialize for Person {","highlight_start":1,"highlight_end":36},{"text":"    ///     fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>","highlight_start":1,"highlight_end":77},{"text":"    ///     where","highlight_start":1,"highlight_end":18},{"text":"    ///         S: Serializer,","highlight_start":1,"highlight_end":31},{"text":"    ///     {","highlight_start":1,"highlight_end":14},{"text":"    ///         let mut s = serializer.serialize_struct(\"Person\", 3)?;","highlight_start":1,"highlight_end":71},{"text":"    ///         s.serialize_field(\"name\", &self.name)?;","highlight_start":1,"highlight_end":56},{"text":"    ///         s.serialize_field(\"age\", &self.age)?;","highlight_start":1,"highlight_end":54},{"text":"    ///         s.serialize_field(\"phones\", &self.phones)?;","highlight_start":1,"highlight_end":60},{"text":"    ///         s.end()","highlight_start":1,"highlight_end":24},{"text":"    ///     }","highlight_start":1,"highlight_end":14},{"text":"    /// }","highlight_start":1,"highlight_end":10},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [Implementing `Serialize`]: https://serde.rs/impl-serialize.html","highlight_start":1,"highlight_end":73},{"text":"    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>","highlight_start":1,"highlight_end":69},{"text":"    where","highlight_start":1,"highlight_end":10},{"text":"        S: Serializer;","highlight_start":1,"highlight_end":23},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `update` exists for struct `Item<'static, state::State>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:56:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    STATE.update(deps.storage, |mut state| -> Result<_, ContractError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `Item<'static, state::State>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/state.rs:8:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct State {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `state::State: DeserializeOwned`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `state::State: Serialize`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `state::State: Serialize`\u001b[0m\n\u001b[0m            `state::State: DeserializeOwned`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following traits must be implemented\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/abhilash/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.127/src/de/mod.rs:602:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m602\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub trait DeserializeOwned: for<'de> Deserialize<'de> {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/abhilash/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.127/src/ser/mod.rs:216:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Serialize {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Serialize this value into the given Serde serializer.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// See the [Implementing `Serialize`] section of the manual for more\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        S: Serializer;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\n\n"}
{"message":"the method `load` exists for struct `Item<'static, state::State>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":2335,"byte_end":2339,"line_start":74,"line_end":74,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"    let state = STATE.load(deps.storage)?;","highlight_start":23,"highlight_end":27}],"label":"method cannot be called on `Item<'static, state::State>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/state.rs","byte_start":195,"byte_end":211,"line_start":8,"line_end":8,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct State {","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `state::State: DeserializeOwned`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/state.rs","byte_start":195,"byte_end":211,"line_start":8,"line_end":8,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct State {","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `state::State: Serialize`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`state::State: Serialize`\n`state::State: DeserializeOwned`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following traits must be implemented","code":null,"level":"note","spans":[{"file_name":"/home/abhilash/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.127/src/de/mod.rs","byte_start":22260,"byte_end":22316,"line_start":602,"line_end":602,"column_start":1,"column_end":57,"is_primary":true,"text":[{"text":"pub trait DeserializeOwned: for<'de> Deserialize<'de> {}","highlight_start":1,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/abhilash/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.127/src/ser/mod.rs","byte_start":7921,"byte_end":9092,"line_start":216,"line_end":250,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub trait Serialize {","highlight_start":1,"highlight_end":22},{"text":"    /// Serialize this value into the given Serde serializer.","highlight_start":1,"highlight_end":62},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// See the [Implementing `Serialize`] section of the manual for more","highlight_start":1,"highlight_end":74},{"text":"    /// information about how to implement this method.","highlight_start":1,"highlight_end":56},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// ```edition2018","highlight_start":1,"highlight_end":23},{"text":"    /// use serde::ser::{Serialize, SerializeStruct, Serializer};","highlight_start":1,"highlight_end":66},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// struct Person {","highlight_start":1,"highlight_end":24},{"text":"    ///     name: String,","highlight_start":1,"highlight_end":26},{"text":"    ///     age: u8,","highlight_start":1,"highlight_end":21},{"text":"    ///     phones: Vec<String>,","highlight_start":1,"highlight_end":33},{"text":"    /// }","highlight_start":1,"highlight_end":10},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // This is what #[derive(Serialize)] would generate.","highlight_start":1,"highlight_end":61},{"text":"    /// impl Serialize for Person {","highlight_start":1,"highlight_end":36},{"text":"    ///     fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>","highlight_start":1,"highlight_end":77},{"text":"    ///     where","highlight_start":1,"highlight_end":18},{"text":"    ///         S: Serializer,","highlight_start":1,"highlight_end":31},{"text":"    ///     {","highlight_start":1,"highlight_end":14},{"text":"    ///         let mut s = serializer.serialize_struct(\"Person\", 3)?;","highlight_start":1,"highlight_end":71},{"text":"    ///         s.serialize_field(\"name\", &self.name)?;","highlight_start":1,"highlight_end":56},{"text":"    ///         s.serialize_field(\"age\", &self.age)?;","highlight_start":1,"highlight_end":54},{"text":"    ///         s.serialize_field(\"phones\", &self.phones)?;","highlight_start":1,"highlight_end":60},{"text":"    ///         s.end()","highlight_start":1,"highlight_end":24},{"text":"    ///     }","highlight_start":1,"highlight_end":14},{"text":"    /// }","highlight_start":1,"highlight_end":10},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [Implementing `Serialize`]: https://serde.rs/impl-serialize.html","highlight_start":1,"highlight_end":73},{"text":"    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>","highlight_start":1,"highlight_end":69},{"text":"    where","highlight_start":1,"highlight_end":10},{"text":"        S: Serializer;","highlight_start":1,"highlight_end":23},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `load` exists for struct `Item<'static, state::State>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:74:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let state = STATE.load(deps.storage)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `Item<'static, state::State>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/state.rs:8:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct State {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `state::State: DeserializeOwned`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `state::State: Serialize`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `state::State: Serialize`\u001b[0m\n\u001b[0m            `state::State: DeserializeOwned`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following traits must be implemented\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/abhilash/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.127/src/de/mod.rs:602:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m602\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub trait DeserializeOwned: for<'de> Deserialize<'de> {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/abhilash/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.127/src/ser/mod.rs:216:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Serialize {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Serialize this value into the given Serde serializer.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// See the [Implementing `Serialize`] section of the manual for more\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        S: Serializer;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\n\n"}
{"message":"the method `save` exists for struct `Item<'static, state::State>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":839,"byte_end":843,"line_start":26,"line_end":26,"column_start":11,"column_end":15,"is_primary":true,"text":[{"text":"    STATE.save(deps.storage, &state)?;","highlight_start":11,"highlight_end":15}],"label":"method cannot be called on `Item<'static, state::State>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/state.rs","byte_start":195,"byte_end":211,"line_start":8,"line_end":8,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct State {","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `state::State: DeserializeOwned`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/state.rs","byte_start":195,"byte_end":211,"line_start":8,"line_end":8,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"pub struct State {","highlight_start":1,"highlight_end":17}],"label":"doesn't satisfy `state::State: Serialize`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`state::State: Serialize`\n`state::State: DeserializeOwned`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following traits must be implemented","code":null,"level":"note","spans":[{"file_name":"/home/abhilash/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.127/src/de/mod.rs","byte_start":22260,"byte_end":22316,"line_start":602,"line_end":602,"column_start":1,"column_end":57,"is_primary":true,"text":[{"text":"pub trait DeserializeOwned: for<'de> Deserialize<'de> {}","highlight_start":1,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/abhilash/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.127/src/ser/mod.rs","byte_start":7921,"byte_end":9092,"line_start":216,"line_end":250,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub trait Serialize {","highlight_start":1,"highlight_end":22},{"text":"    /// Serialize this value into the given Serde serializer.","highlight_start":1,"highlight_end":62},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// See the [Implementing `Serialize`] section of the manual for more","highlight_start":1,"highlight_end":74},{"text":"    /// information about how to implement this method.","highlight_start":1,"highlight_end":56},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// ```edition2018","highlight_start":1,"highlight_end":23},{"text":"    /// use serde::ser::{Serialize, SerializeStruct, Serializer};","highlight_start":1,"highlight_end":66},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// struct Person {","highlight_start":1,"highlight_end":24},{"text":"    ///     name: String,","highlight_start":1,"highlight_end":26},{"text":"    ///     age: u8,","highlight_start":1,"highlight_end":21},{"text":"    ///     phones: Vec<String>,","highlight_start":1,"highlight_end":33},{"text":"    /// }","highlight_start":1,"highlight_end":10},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// // This is what #[derive(Serialize)] would generate.","highlight_start":1,"highlight_end":61},{"text":"    /// impl Serialize for Person {","highlight_start":1,"highlight_end":36},{"text":"    ///     fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>","highlight_start":1,"highlight_end":77},{"text":"    ///     where","highlight_start":1,"highlight_end":18},{"text":"    ///         S: Serializer,","highlight_start":1,"highlight_end":31},{"text":"    ///     {","highlight_start":1,"highlight_end":14},{"text":"    ///         let mut s = serializer.serialize_struct(\"Person\", 3)?;","highlight_start":1,"highlight_end":71},{"text":"    ///         s.serialize_field(\"name\", &self.name)?;","highlight_start":1,"highlight_end":56},{"text":"    ///         s.serialize_field(\"age\", &self.age)?;","highlight_start":1,"highlight_end":54},{"text":"    ///         s.serialize_field(\"phones\", &self.phones)?;","highlight_start":1,"highlight_end":60},{"text":"    ///         s.end()","highlight_start":1,"highlight_end":24},{"text":"    ///     }","highlight_start":1,"highlight_end":14},{"text":"    /// }","highlight_start":1,"highlight_end":10},{"text":"    /// ```","highlight_start":1,"highlight_end":12},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// [Implementing `Serialize`]: https://serde.rs/impl-serialize.html","highlight_start":1,"highlight_end":73},{"text":"    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>","highlight_start":1,"highlight_end":69},{"text":"    where","highlight_start":1,"highlight_end":10},{"text":"        S: Serializer;","highlight_start":1,"highlight_end":23},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `save` exists for struct `Item<'static, state::State>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:26:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    STATE.save(deps.storage, &state)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `Item<'static, state::State>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/state.rs:8:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct State {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `state::State: DeserializeOwned`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `state::State: Serialize`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `state::State: Serialize`\u001b[0m\n\u001b[0m            `state::State: DeserializeOwned`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following traits must be implemented\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/abhilash/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.127/src/de/mod.rs:602:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m602\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub trait DeserializeOwned: for<'de> Deserialize<'de> {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/abhilash/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.127/src/ser/mod.rs:216:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Serialize {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Serialize this value into the given Serde serializer.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// See the [Implementing `Serialize`] section of the manual for more\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        S: Serializer;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\n\n"}
{"message":"aborting due to 6 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 6 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0599`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0599`.\u001b[0m\n"}
